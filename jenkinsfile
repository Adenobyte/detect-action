/*
* This pipeline script was created manually based on scripts created by jenkins-build-creator.
*
*/
@Library('integration-pipeline-library@master')
import com.synopsys.integration.pipeline.SimplePipeline
properties(
    [
        [
            $class: 'BuildBlockerProperty', 
            blockLevel: <object of type hudson.plugins.buildblocker.BuildBlockerProperty.BlockLevel>, 
            blockingJobs: '', 
            scanQueueFor: <object of type hudson.plugins.buildblocker.BuildBlockerProperty.QueueScanScope>, 
            useBuildBlocker: false
        ], 
        [
            $class: 'ScannerJobProperty', 
            doNotScan: false
        ], 
        disableConcurrentBuilds(), 
        [
            $class: 'LeastLoadDisabledProperty', 
            leastLoadDisabled: false
        ], 
        [
            $class: 'RebuildSettings', 
            autoRebuild: false,
            rebuildDisabled: false
        ],
        parameters(
            [
                gitParameter(
                    branch: '', 
                    branchFilter: '.*', 
                    defaultValue: 'origin/main', 
                    description: 'The branch you want to build. If none are selected, origin/main will be chosen', 
                    name: 'BRANCH', 
                    quickFilterEnabled: false, 
                    selectedValue: 'NONE', 
                    sortMode: 'NONE', 
                    tagFilter: '*', 
                    type: 'PT_BRANCH_TAG'
                )
            ]
        ),
        [
            $class: 'EnvInjectJobProperty',
            info: [
                loadFilesFromMaster: false,
                secureGroovyScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: ''
                ]
            ],
            keepBuildVariables: true,
            keepJenkinsSystemVariables: true,
            on: true
        ],
        [
            $class: 'JobLocalConfiguration',
            changeReasonComment: ''
        ],
        pipelineTriggers(
            [
                cron('H H(0-6) * * *'),
                pollSCM('H/15 * * * *')
            ]
        )
    ]
)

String emailRecipients = ''
def gitUrl = 'https://github.com/synopsys-sig/detect-action.git'
String branch = (params.BRANCH != null) ? "${BRANCH}" : 'origin/master'
String archivePattern = '**/dist/*.js'

node('integrations') {
    SimplePipeline pipeline = new SimplePipeline(this)
    pipeline.addCleanupStep('.')

    String gitBranch = pipeline.determineGitBranch(branch)
    pipeline.setDirectoryFromBranch(gitBranch)
    def gitStage = pipeline.addGitStage(gitUrl, gitBranch, false)
    gitStage.setChangelog(true)

    pipeline.addApiTokenStage()

    pipeline.setUrl(gitUrl)
    pipeline.setGithubCredentialsId(gitStage.getCredentialsId())
    pipeline.addEmailPipelineWrapper(emailRecipients)

    def buildStage = pipeline.addStage('Build'){
        sh 'npm ci && npm run all'
    }

    pipeline.addArchiveStage(archivePattern)

    pipeline.run()
}
